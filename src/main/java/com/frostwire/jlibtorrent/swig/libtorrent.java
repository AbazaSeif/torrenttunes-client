/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class libtorrent implements libtorrentConstants {
  public static high_resolution_clock.duration to_seconds(long arg0) {
    return new high_resolution_clock.duration(libtorrent_jni.to_seconds(arg0), true);
  }

  public static high_resolution_clock.duration to_milliseconds(long arg0) {
    return new high_resolution_clock.duration(libtorrent_jni.to_milliseconds(arg0), true);
  }

  public static high_resolution_clock.duration to_microseconds(long arg0) {
    return new high_resolution_clock.duration(libtorrent_jni.to_microseconds(arg0), true);
  }

  public static high_resolution_clock.duration to_minutes(long arg0) {
    return new high_resolution_clock.duration(libtorrent_jni.to_minutes(arg0), true);
  }

  public static high_resolution_clock.duration to_hours(long arg0) {
    return new high_resolution_clock.duration(libtorrent_jni.to_hours(arg0), true);
  }

  public static boolean op_eq(error_condition lhs, error_condition rhs) {
    return libtorrent_jni.op_eq__SWIG_0(error_condition.getCPtr(lhs), lhs, error_condition.getCPtr(rhs), rhs);
  }

  public static boolean op_lt(error_condition lhs, error_condition rhs) {
    return libtorrent_jni.op_lt__SWIG_0(error_condition.getCPtr(lhs), lhs, error_condition.getCPtr(rhs), rhs);
  }

  public static boolean op_eq(error_code lhs, error_code rhs) {
    return libtorrent_jni.op_eq__SWIG_1(error_code.getCPtr(lhs), lhs, error_code.getCPtr(rhs), rhs);
  }

  public static boolean op_lt(error_code lhs, error_code rhs) {
    return libtorrent_jni.op_lt__SWIG_1(error_code.getCPtr(lhs), lhs, error_code.getCPtr(rhs), rhs);
  }

  public static boolean op_neq(error_code lhs, error_code rhs) {
    return libtorrent_jni.op_neq__SWIG_0(error_code.getCPtr(lhs), lhs, error_code.getCPtr(rhs), rhs);
  }

  public static boolean op_neq(error_condition lhs, error_condition rhs) {
    return libtorrent_jni.op_neq__SWIG_1(error_condition.getCPtr(lhs), lhs, error_condition.getCPtr(rhs), rhs);
  }

  public static boolean op_eq(error_code code, error_condition condition) {
    return libtorrent_jni.op_eq__SWIG_2(error_code.getCPtr(code), code, error_condition.getCPtr(condition), condition);
  }

  public static boolean op_neq(error_code lhs, error_condition rhs) {
    return libtorrent_jni.op_neq__SWIG_2(error_code.getCPtr(lhs), lhs, error_condition.getCPtr(rhs), rhs);
  }

  public static boolean op_eq(error_condition condition, error_code code) {
    return libtorrent_jni.op_eq__SWIG_3(error_condition.getCPtr(condition), condition, error_code.getCPtr(code), code);
  }

  public static boolean op_neq(error_condition lhs, error_code rhs) {
    return libtorrent_jni.op_neq__SWIG_3(error_condition.getCPtr(lhs), lhs, error_code.getCPtr(rhs), rhs);
  }

  public static long hash_value(error_code ec) {
    return libtorrent_jni.hash_value(error_code.getCPtr(ec), ec);
  }

  public static error_code make_error_code(errc_t e) {
    return new error_code(libtorrent_jni.make_error_code(e.swigValue()), true);
  }

  public static error_condition make_error_condition(errc_t e) {
    return new error_condition(libtorrent_jni.make_error_condition(e.swigValue()), true);
  }

  public static error_category get_libtorrent_category() {
    return new error_category(libtorrent_jni.get_libtorrent_category(), false);
  }

  public static error_category get_http_category() {
    return new error_category(libtorrent_jni.get_http_category(), false);
  }

  public static error_category get_system_category() {
    return new error_category(libtorrent_jni.get_system_category(), false);
  }

  public static error_category get_posix_category() {
    return new error_category(libtorrent_jni.get_posix_category(), false);
  }

  public static String time_now_string() {
    return libtorrent_jni.time_now_string();
  }

  public static String log_time() {
    return libtorrent_jni.log_time();
  }

  public static ptime time_now() {
    return new ptime(libtorrent_jni.time_now(), false);
  }

  public static ptime time_now_hires() {
    return new ptime(libtorrent_jni.time_now_hires(), true);
  }

  public static ptime min_time() {
    return new ptime(libtorrent_jni.min_time(), true);
  }

  public static ptime max_time() {
    return new ptime(libtorrent_jni.max_time(), true);
  }

  public static posix_time_duration seconds(long s) {
    return new posix_time_duration(libtorrent_jni.seconds(s), true);
  }

  public static posix_time_duration milliseconds(long s) {
    return new posix_time_duration(libtorrent_jni.milliseconds(s), true);
  }

  public static posix_time_duration microsec(long s) {
    return new posix_time_duration(libtorrent_jni.microsec(s), true);
  }

  public static posix_time_duration minutes(long s) {
    return new posix_time_duration(libtorrent_jni.minutes(s), true);
  }

  public static posix_time_duration hours(long s) {
    return new posix_time_duration(libtorrent_jni.hours(s), true);
  }

  public static long total_seconds(posix_time_duration td) {
    return libtorrent_jni.total_seconds(posix_time_duration.getCPtr(td), td);
  }

  public static long total_milliseconds(posix_time_duration td) {
    return libtorrent_jni.total_milliseconds(posix_time_duration.getCPtr(td), td);
  }

  public static long total_microseconds(posix_time_duration td) {
    return libtorrent_jni.total_microseconds(posix_time_duration.getCPtr(td), td);
  }

  public static torrent_handle add_feed_item(session s, feed_item fi, add_torrent_params p) {
    return new torrent_handle(libtorrent_jni.add_feed_item__SWIG_0(session.getCPtr(s), s, feed_item.getCPtr(fi), fi, add_torrent_params.getCPtr(p), p), true);
  }

  public static torrent_handle add_feed_item(session s, feed_item fi, add_torrent_params p, error_code ec) {
    return new torrent_handle(libtorrent_jni.add_feed_item__SWIG_1(session.getCPtr(s), s, feed_item.getCPtr(fi), fi, add_torrent_params.getCPtr(p), p, error_code.getCPtr(ec), ec), true);
  }

  public static int getUser_alert_id() {
    return libtorrent_jni.user_alert_id_get();
  }

  public static int source_rank(int source_bitmask) {
    return libtorrent_jni.source_rank(source_bitmask);
  }

  public static long peer_priority(tcp_endpoint e1, tcp_endpoint e2) {
    return libtorrent_jni.peer_priority(tcp_endpoint.getCPtr(e1), e1, tcp_endpoint.getCPtr(e2), e2);
  }

  public static session_settings min_memory_usage() {
    return new session_settings(libtorrent_jni.min_memory_usage(), true);
  }

  public static session_settings high_performance_seed() {
    return new session_settings(libtorrent_jni.high_performance_seed(), true);
  }

  public static int plus_one(int val) {
    return libtorrent_jni.plus_one(val);
  }

  public static int minus_one(int val) {
    return libtorrent_jni.minus_one(val);
  }

  public static String print_entry(lazy_entry e, boolean single_line, int indent) {
    return libtorrent_jni.print_entry__SWIG_0(lazy_entry.getCPtr(e), e, single_line, indent);
  }

  public static String print_entry(lazy_entry e, boolean single_line) {
    return libtorrent_jni.print_entry__SWIG_1(lazy_entry.getCPtr(e), e, single_line);
  }

  public static String print_entry(lazy_entry e) {
    return libtorrent_jni.print_entry__SWIG_2(lazy_entry.getCPtr(e), e);
  }

  public static error_category get_bdecode_category() {
    return new error_category(libtorrent_jni.get_bdecode_category(), false);
  }

  public static String make_magnet_uri(torrent_handle handle) {
    return libtorrent_jni.make_magnet_uri__SWIG_0(torrent_handle.getCPtr(handle), handle);
  }

  public static String make_magnet_uri(torrent_info info) {
    return libtorrent_jni.make_magnet_uri__SWIG_1(torrent_info.getCPtr(info), info);
  }

  public static void parse_magnet_uri(String uri, add_torrent_params p, error_code ec) {
    libtorrent_jni.parse_magnet_uri(uri, add_torrent_params.getCPtr(p), p, error_code.getCPtr(ec), ec);
  }

  public static void add_files(file_storage fs, String file, long flags) {
    libtorrent_jni.add_files__SWIG_2(file_storage.getCPtr(fs), fs, file, flags);
  }

  public static void add_files(file_storage fs, String file) {
    libtorrent_jni.add_files__SWIG_3(file_storage.getCPtr(fs), fs, file);
  }

  public static void set_piece_hashes(create_torrent t, String p, error_code ec) {
    libtorrent_jni.set_piece_hashes__SWIG_0(create_torrent.getCPtr(t), t, p, error_code.getCPtr(ec), ec);
  }

  public static void set_piece_hashes(create_torrent t, String p) {
    libtorrent_jni.set_piece_hashes__SWIG_1(create_torrent.getCPtr(t), t, p);
  }

  public static error_category get_upnp_category() {
    return new error_category(libtorrent_jni.get_upnp_category(), false);
  }

}
