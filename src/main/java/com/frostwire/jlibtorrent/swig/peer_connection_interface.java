/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.frostwire.jlibtorrent.swig;

public class peer_connection_interface {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected peer_connection_interface(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(peer_connection_interface obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  public tcp_endpoint remote() {
    return new tcp_endpoint(libtorrent_jni.peer_connection_interface_remote(swigCPtr, this), false);
  }

  public tcp_endpoint local_endpoint() {
    return new tcp_endpoint(libtorrent_jni.peer_connection_interface_local_endpoint(swigCPtr, this), true);
  }

  public void disconnect(error_code ec, operation_t op, int error) {
    libtorrent_jni.peer_connection_interface_disconnect__SWIG_0(swigCPtr, this, error_code.getCPtr(ec), ec, op.swigValue(), error);
  }

  public void disconnect(error_code ec, operation_t op) {
    libtorrent_jni.peer_connection_interface_disconnect__SWIG_1(swigCPtr, this, error_code.getCPtr(ec), ec, op.swigValue());
  }

  public sha1_hash pid() {
    return new sha1_hash(libtorrent_jni.peer_connection_interface_pid(swigCPtr, this), false);
  }

  public void set_holepunch_mode() {
    libtorrent_jni.peer_connection_interface_set_holepunch_mode(swigCPtr, this);
  }

  public torrent_peer peer_info_struct() {
    long cPtr = libtorrent_jni.peer_connection_interface_peer_info_struct(swigCPtr, this);
    return (cPtr == 0) ? null : new torrent_peer(cPtr, false);
  }

  public void set_peer_info(torrent_peer pi) {
    libtorrent_jni.peer_connection_interface_set_peer_info(swigCPtr, this, torrent_peer.getCPtr(pi), pi);
  }

  public boolean is_outgoing() {
    return libtorrent_jni.peer_connection_interface_is_outgoing(swigCPtr, this);
  }

  public void add_stat(long downloaded, long uploaded) {
    libtorrent_jni.peer_connection_interface_add_stat(swigCPtr, this, downloaded, uploaded);
  }

  public boolean fast_reconnect() {
    return libtorrent_jni.peer_connection_interface_fast_reconnect(swigCPtr, this);
  }

  public boolean is_choked() {
    return libtorrent_jni.peer_connection_interface_is_choked(swigCPtr, this);
  }

  public boolean failed() {
    return libtorrent_jni.peer_connection_interface_failed(swigCPtr, this);
  }

  public stat statistics() {
    return new stat(libtorrent_jni.peer_connection_interface_statistics(swigCPtr, this), false);
  }

  public void get_peer_info(peer_info p) {
    libtorrent_jni.peer_connection_interface_get_peer_info(swigCPtr, this, peer_info.getCPtr(p), p);
  }

}
